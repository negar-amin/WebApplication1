using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.EntityFrameworkCore;
using Swashbuckle.AspNetCore.SwaggerUI;
using Microsoft.OpenApi.Models;

public class Startup
{
	public IConfiguration Configuration { get; }

	public Startup(IConfiguration configuration)
	{
		Configuration = configuration;
	}

	public void ConfigureServices(IServiceCollection services)
	{
		services.AddDbContext<ApplicationDbContext>(options =>
			options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

		services.AddScoped(typeof(IRepository<>), typeof(Repository<>));
		services.AddScoped<IProductService, ProductService>();
		services.AddHttpsRedirection(options =>
		{
			options.HttpsPort = 5077; // Set the HTTPS port here
		});
		services.AddControllers();
		services.AddSwaggerGen(c =>
		{
			c.SwaggerDoc("v1", new OpenApiInfo
			{
				Version = "v1",
				Title = "Your API",
				Description = "A simple ASP.NET Core Web API",
				Contact = new OpenApiContact
				{
					Name = "Your Name",
					Email = "your.email@example.com",
					Url = new Uri("https://example.com"),
				},
				License = new OpenApiLicense
				{
					Name = "Use under LICX",
					Url = new Uri("https://example.com/license"),
				}
			});

			// Optional: Set the comments path for the Swagger JSON and UI.
			// The XML comments file is generated by enabling XML documentation in project properties.
			// c.IncludeXmlComments(XmlCommentsFilePath);
		});

	}

	public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
	{
		if (env.IsDevelopment())
		{
			app.UseDeveloperExceptionPage();
		}
		else
		{
			app.UseExceptionHandler("/Home/Error");
			app.UseHsts();
		}
		app.UseSwagger();

		// Enable middleware to serve Swagger UI, specifying the Swagger JSON endpoint
		app.UseSwaggerUI(c =>
		{
			c.SwaggerEndpoint("/swagger/v1/swagger.json", "Your API V1");
			// Optionally, configure the Swagger UI
			c.RoutePrefix = "swagger";
			c.DocExpansion(DocExpansion.None);
		});

		app.UseHttpsRedirection();
		app.UseRouting();
		app.UseAuthorization();

		app.UseEndpoints(endpoints =>
		{
			endpoints.MapControllers();
		});
	}
}
